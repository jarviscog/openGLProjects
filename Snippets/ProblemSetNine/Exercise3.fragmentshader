#version 400

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection1_cameraspace;
in vec3 LightDirection2_cameraspace;

// Ouput data
out vec4 color;

uniform vec4 modelcolor;
uniform float alpha;

void main(){

    vec4 LightColor = vec4(1,1,1,1);

    // Material properties
    vec4 MaterialDiffuseColor = modelcolor;
    vec4 MaterialAmbientColor = vec4(0.2,0.2,0.2,modelcolor.a) * MaterialDiffuseColor;
    vec4 MaterialSpecularColor = vec4(0.7, 0.7, 0.7,modelcolor.a);

    // Normal of the computed fragment, in camera space
    vec3 n = normalize( Normal_cameraspace );
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize( LightDirection1_cameraspace + LightDirection2_cameraspace) ;


    float cosTheta = clamp( dot( n,l ), 0,1 );

    // Eye vector (towards the camera)
    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l,n);
    float cosAlpha = clamp( dot( E,R ), 0,1 );

    color =
        // Ambient : simulates indirect lighting
        MaterialAmbientColor +
        // Diffuse : "color" of the object
        MaterialDiffuseColor * LightColor * cosTheta +
        // Specular : reflective highlight, like a mirror
        MaterialSpecularColor * LightColor * pow(cosAlpha,alpha);

}
